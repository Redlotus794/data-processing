"""
定义etl相关方法
"""
import re
import markdownify
import os
from datetime import datetime
from db.db_manager import DBConn
from db.model.dragon_knowledge_base import DragonKnowledgeBase
from db.model.p_dragon import DVL, DVL_V2
from sqlalchemy.dialects.postgresql import insert

def convert_to_md(html_content):
    """
    将html的内容输出为md格式
    将多行空格改为一行
    移除Confluence的标注
    """
    temp_content = markdownify.markdownify(html_content)
    temp_content = re.sub(r'\n\s*\n', '\n\n', temp_content)
    temp_content = re.sub(r'Document generated by Confluence on .*\n', '', temp_content)
    temp_content = temp_content.replace('[Atlassian](https://www.atlassian.com/)', '')
    new_content = re.sub(r'\n{2,}', '\n\n', temp_content)
    return new_content


def save_model(conn:DBConn, model: DragonKnowledgeBase):
    """
    保存模型
    """
    # name,hash一致 , DragonKnowledgeBase.hash==item.hash
    existing_same = conn.session.query(DragonKnowledgeBase)\
        .filter(DragonKnowledgeBase.name == model.name, DragonKnowledgeBase.hash == model.hash)\
        .first()
    # name一致，hash不一致，内容有变化
    existing_diff = conn.session.query(DragonKnowledgeBase)\
        .filter(DragonKnowledgeBase.name == model.name, DragonKnowledgeBase.hash != model.hash)\
        .first()
    
    if existing_same:
        print(f"{model.name} 已经存在")
        return

    if existing_diff:
        modify_create_time = existing_diff.create_time
        modify_update_time = datetime.now()
    else:
        modify_create_time = model.create_time
        modify_update_time = model.create_time
    
    stmt = insert(DragonKnowledgeBase).values(
            name=model.name,
            hash=model.hash,
            content=model.content).on_conflict_do_update(
                index_elements=['name'], set_=dict(hash=model.hash, content=model.content, create_time=modify_create_time, update_time=modify_update_time)
            )    
    conn.execute(stmt)


def save_dvl_model(conn:DBConn, model: DVL):
    """
    保存模型
    """
    # name,hash一致 , DragonKnowledgeBase.hash==item.hash
    existing_same = conn.session.query(DVL)\
        .filter(DVL.name == model.name, DVL.hash == model.hash)\
        .first()
    # name一致，hash不一致，内容有变化
    existing_diff = conn.session.query(DVL)\
        .filter(DVL.name == model.name, DVL.hash != model.hash)\
        .first()
    
    if existing_same:
        print(f"{model.name} 已经存在")
        return

    if existing_diff:
        modify_create_time = existing_diff.create_time
        modify_update_time = datetime.now()
    else:
        modify_create_time = model.create_time
        modify_update_time = model.create_time
    
    stmt = insert(DVL).values(
            name=model.name,
            hash=model.hash,
            content=model.content).on_conflict_do_update(
                index_elements=['name'], set_=dict(hash=model.hash, content=model.content, create_time=modify_create_time, update_time=modify_update_time)
            )    
    conn.execute(stmt)


def save_dvl_v2_model(conn:DBConn, model: DVL_V2):
    """
    保存模型
    """
    # name,hash一致 , DragonKnowledgeBase.hash==item.hash
    existing_same = conn.session.query(DVL_V2)\
        .filter(DVL_V2.name == model.name, DVL_V2.hash == model.hash)\
        .first()
    # name一致，hash不一致，内容有变化
    existing_diff = conn.session.query(DVL_V2)\
        .filter(DVL_V2.name == model.name, DVL_V2.hash != model.hash)\
        .first()
    
    if existing_same:
        print(f"{model.name} 已经存在")
        return

    if existing_diff:
        modify_create_time = existing_diff.create_time
        modify_update_time = datetime.now()
    else:
        modify_create_time = model.create_time
        modify_update_time = model.create_time
    
    stmt = insert(DVL_V2).values(
            name=model.name,
            hash=model.hash,
            content=model.content).on_conflict_do_update(
                index_elements=['name'], set_=dict(hash=model.hash, content=model.content, create_time=modify_create_time, update_time=modify_update_time)
            )    
    conn.execute(stmt)